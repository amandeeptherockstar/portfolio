{
  "title": "5 Essential Developer Tools for an Optimized Workflow",
  "description": "Tools that I've been using daily that I couldn't do without",
  "publishDate": "2024-08-19T00:00:00.000Z",
  "tags": [
    "Productivity",
    "Developer Tools",
    "Workflow Optimization"
  ],
  "draft": false,
  "body": {
    "raw": "\nMy pursuit of a perfectly optimized workflow has led me to these indispensable tools. Here's what works best for me:\n\n## Neovim\n\n[Neovim](https://neovim.io/) is my primary code editor, offering speed, simplicity, and infinite customization. It does have a steep learning curve, but you can gradually start with Vim motions in your own editor which provide most of the value of neovim anyway. <br />\nIf you are just starting out, then I would highly recommend using [kickstart.nvim](https://github.com/nvim-lua/kickstart.nvim)\n\n**What I love ❣️**\n\n-   using `hjkl` to move around instead of arrow keys\n-   motions like: `di{` (delete content inside \\{_..._\\}) , `V5jy` (copy 5 lines down)\n-   rich plugins ecosystem: example telescope.nvim for fuzzy search across my project\n-   macros\n-   brings you closer to the terminal, which has far reaching benefits\n\n## Tmux\n\n[Tmux](https://github.com/tmux/tmux/wiki) enables me to manage multiple terminal sessions effortlessly. I can split terminals into panes, allowing simultaneous task execution—be it running servers, editing files, or monitoring logs. Its session persistence ensures I can pick up exactly where I left off, streamlining task management across projects.\n\n**What I love ❣️**\n\n-   starting a session on any of the listed directories using fuzzy search - enabled by fzf\n\n## Lazygit\n\n[Lazygit](https://github.com/jesseduffield/lazygit) offers a rich TUI for Git workflows. It pairs super well with neovim and tmux, offering keyboard shortcuts for almost all your git needs. I have it setup in neovim such that `<leader>gg` pops up a tmux window with lazygit running.\n\n**What I love ❣️**\n\n-   opening a PR using `\"o\"`\n-   inspecting diff from the file tree, and partial staging\n\n## Window Manager\n\nA tiling window manager is vital for maintaining an organized workspace, and switching between applications without losing focus. **Hot take - a single monitor setup with proper window management is more efficient than a multi-monitor setup**.<br />\nThe reason for that is you can only focus (think: mouse-focus) on one window at a time. The only exception is when the second screen is purely visual\n\nI use [yabai](https://github.com/koekeishiya/yabai) as I'm on macOS. [i3](https://i3wm.org/) is fantastic for Linux\n\n**What I love ❣️**\n\n-   using `alt-1`, `alt-2` etc. to switch between windows\n-   fixing the application on a single window number. So my browser will always be open on `alt-1`, my editor on `alt-2` etc. removing any potential overhead when navigating\n\n## Arc Browser\n\nThe people working at [Arc](https://arc.net/) have nailed the polished browser experience. It never gets in your way, while providing a seamless browsing experience.\n\n**What I love ❣️**\n\n-   the horizontal tabs - I was skeptical at first but now I can't go back\n-   ability to customise keybindings\n-   workspace switching without opening a new window on your system\n-   saving split-tab groups",
    "code": "var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var f=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),y=(i,e)=>{for(var t in e)r(i,t,{get:e[t],enumerable:!0})},l=(i,e,t,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!w.call(i,o)&&o!==t&&r(i,o,{get:()=>e[o],enumerable:!(s=m(e,o))||s.enumerable});return i};var v=(i,e,t)=>(t=i!=null?u(g(i)):{},l(e||!i||!i.__esModule?r(t,\"default\",{value:i,enumerable:!0}):t,i)),b=i=>l(r({},\"__esModule\",{value:!0}),i);var c=f((z,a)=>{a.exports=_jsx_runtime});var x={};y(x,{default:()=>d,frontmatter:()=>k});var n=v(c()),k={title:\"5 Essential Developer Tools for an Optimized Workflow\",description:\"Tools that I've been using daily that I couldn't do without\",publishDate:\"2024-08-19\",tags:[\"Productivity\",\"Developer Tools\",\"Workflow Optimization\"]};function h(i){let e={a:\"a\",code:\"code\",em:\"em\",h2:\"h2\",li:\"li\",p:\"p\",strong:\"strong\",ul:\"ul\",...i.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"My pursuit of a perfectly optimized workflow has led me to these indispensable tools. Here's what works best for me:\"}),`\n`,(0,n.jsx)(e.h2,{id:\"neovim\",children:\"Neovim\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://neovim.io/\",children:\"Neovim\"}),\" is my primary code editor, offering speed, simplicity, and infinite customization. It does have a steep learning curve, but you can gradually start with Vim motions in your own editor which provide most of the value of neovim anyway. \",(0,n.jsx)(\"br\",{}),`\nIf you are just starting out, then I would highly recommend using `,(0,n.jsx)(e.a,{href:\"https://github.com/nvim-lua/kickstart.nvim\",children:\"kickstart.nvim\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"What I love \\u2763\\uFE0F\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"using \",(0,n.jsx)(e.code,{children:\"hjkl\"}),\" to move around instead of arrow keys\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"motions like: \",(0,n.jsx)(e.code,{children:\"di{\"}),\" (delete content inside {\",(0,n.jsx)(e.em,{children:\"...\"}),\"}) , \",(0,n.jsx)(e.code,{children:\"V5jy\"}),\" (copy 5 lines down)\"]}),`\n`,(0,n.jsx)(e.li,{children:\"rich plugins ecosystem: example telescope.nvim for fuzzy search across my project\"}),`\n`,(0,n.jsx)(e.li,{children:\"macros\"}),`\n`,(0,n.jsx)(e.li,{children:\"brings you closer to the terminal, which has far reaching benefits\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"tmux\",children:\"Tmux\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/tmux/tmux/wiki\",children:\"Tmux\"}),\" enables me to manage multiple terminal sessions effortlessly. I can split terminals into panes, allowing simultaneous task execution\\u2014be it running servers, editing files, or monitoring logs. Its session persistence ensures I can pick up exactly where I left off, streamlining task management across projects.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"What I love \\u2763\\uFE0F\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"starting a session on any of the listed directories using fuzzy search - enabled by fzf\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"lazygit\",children:\"Lazygit\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/jesseduffield/lazygit\",children:\"Lazygit\"}),\" offers a rich TUI for Git workflows. It pairs super well with neovim and tmux, offering keyboard shortcuts for almost all your git needs. I have it setup in neovim such that \",(0,n.jsx)(e.code,{children:\"<leader>gg\"}),\" pops up a tmux window with lazygit running.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"What I love \\u2763\\uFE0F\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"opening a PR using \",(0,n.jsx)(e.code,{children:'\"o\"'})]}),`\n`,(0,n.jsx)(e.li,{children:\"inspecting diff from the file tree, and partial staging\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"window-manager\",children:\"Window Manager\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"A tiling window manager is vital for maintaining an organized workspace, and switching between applications without losing focus. \",(0,n.jsx)(e.strong,{children:\"Hot take - a single monitor setup with proper window management is more efficient than a multi-monitor setup\"}),\".\",(0,n.jsx)(\"br\",{}),`\nThe reason for that is you can only focus (think: mouse-focus) on one window at a time. The only exception is when the second screen is purely visual`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I use \",(0,n.jsx)(e.a,{href:\"https://github.com/koekeishiya/yabai\",children:\"yabai\"}),\" as I'm on macOS. \",(0,n.jsx)(e.a,{href:\"https://i3wm.org/\",children:\"i3\"}),\" is fantastic for Linux\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"What I love \\u2763\\uFE0F\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"using \",(0,n.jsx)(e.code,{children:\"alt-1\"}),\", \",(0,n.jsx)(e.code,{children:\"alt-2\"}),\" etc. to switch between windows\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"fixing the application on a single window number. So my browser will always be open on \",(0,n.jsx)(e.code,{children:\"alt-1\"}),\", my editor on \",(0,n.jsx)(e.code,{children:\"alt-2\"}),\" etc. removing any potential overhead when navigating\"]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"arc-browser\",children:\"Arc Browser\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The people working at \",(0,n.jsx)(e.a,{href:\"https://arc.net/\",children:\"Arc\"}),\" have nailed the polished browser experience. It never gets in your way, while providing a seamless browsing experience.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.strong,{children:\"What I love \\u2763\\uFE0F\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"the horizontal tabs - I was skeptical at first but now I can't go back\"}),`\n`,(0,n.jsx)(e.li,{children:\"ability to customise keybindings\"}),`\n`,(0,n.jsx)(e.li,{children:\"workspace switching without opening a new window on your system\"}),`\n`,(0,n.jsx)(e.li,{children:\"saving split-tab groups\"}),`\n`]})]})}function d(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,{...i,children:(0,n.jsx)(h,{...i})}):h(i)}return b(x);})();\n;return Component;"
  },
  "_id": "blog/developer-tools-for-productivity.mdx",
  "_raw": {
    "sourceFilePath": "blog/developer-tools-for-productivity.mdx",
    "sourceFileName": "developer-tools-for-productivity.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/developer-tools-for-productivity"
  },
  "type": "Blog",
  "slug": "developer-tools-for-productivity"
}